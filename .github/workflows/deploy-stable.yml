name: deploy-stable

on:
  # Currently this workflow only runs when triggered manually.  Perhaps we can set it up to run when a tag is pushed.  Or when a release is made.  Or that it could create a release, on a release it can create a tag?
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      level:
        description: "The level of release to make"
        required: true
        type: choice
        default: "patch"
        options:
          - "patch"
          - "minor"
          - "major"
      branch:
        description: "Use main branch for regular releases, legacy-support for 1.8x fixes."
        required: false
        type: choice
        default: "main"
        options:
          - "main"
          - "legacy-support"

jobs:
  deploy:
    name: Deploy to pypi
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      # Sets up python3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      # Setup poetry
      - name: Install poetry 1.5.1
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry==1.5.1

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Build package
        run: poetry run python scripts/build_package.py

      - name: Discover current version
        run: |
          poetry run pretext --version
          echo "VERSION=$(poetry run pretext --version)" >> $GITHUB_ENV

      - name: Update version if needed
        if: ${{ inputs.level != 'patch' }}
        run: |
          echo "VERSION=$(poetry version ${{ inputs.level }} -s)" >> $GITHUB_ENV

      - name: Publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "Would be publishing here..."

      - name: echo version
        run: |
          echo "Version is $VERSION"
          
      - name: Update version for next dev release
        run: poetry version patch

      - name: setup git config
        run: |
          # setup the username and email.
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      # - name: commit
      #   run: |
      #     # Stage the file, commit and push
      #     git add pyproject.toml
      #     git commit -m "bump version to next patch level for nightly releases"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v"$VERSION"
          release_name: v"$VERSION"
          # body: |
          #   Changes in this Release
          #   - First Change
          #   - Second Change
          draft: false
          prerelease: false

      - name: pull request
        run: |
          git checkout -b "$VERSION"
          git add pyproject.toml
          git commit -m "bump version to next patch level for nightly releases"
          git push --set-upstream origin "$VERSION"
          gh pr create --fill
          gh pr merge -s -d -t "bump version to next patch level for nightly releases"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
