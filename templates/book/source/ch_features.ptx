<?xml version='1.0' encoding='utf-8'?>
<!-- This chapter will eventually contain a bunch of examples of pretext functionality. Useful for copy/paste examples of various things. -->

<chapter xml:id="ch_features" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Examples of <pretext /> features</title>
  <introduction>
    <p>Below are examples of a lot of <pretext /> elements.</p>
  </introduction>
  <section xml:id="sec_features-blocks">
    <title>Environments and Blocks</title>
    <p>Some text</p>
    <theorem xml:id="thm_features-blocks-my-theorem">
      <title>My Theorem</title>
      
      <statement>
        <p>
          Theorem statement.          
        </p>
      </statement>
      <proof>
        <p>
          Proof of theorem.
        </p>
      </proof>
    </theorem>
    
    <example>
      <statement>
        <p>
          Statement of example
        </p>
      </statement>
      <solution>
        <p>
          The solution.
        </p>
      </solution>
    </example>
    <p>
      Now a figure.
    </p>
    <figure>
      <caption>A frog</caption>
      <image source="frog.jpg" width="50%">
        <description>A nice-looking frog with a longish
        description.</description>
      </image>
    </figure>
    <p>
      In your source, uncomment any of the figures below to try building various
      types of images (Tikz, SageMath, Asymptote) with <c>pretext build -g all</c>.
    </p>
    <!-- <xi:include href="./fig_tikz.ptx" /> -->
    <!-- <xi:include href="./fig_sage2d.ptx" /> -->
    <!-- <xi:include href="./fig_sage3d.ptx" /> -->
    <!-- <xi:include href="./fig_asymptote.ptx" /> -->
  </section>
  <section xml:id="webwork">
    <title><webwork /> Minimal Section</title>
    <p>In your source, uncomment the exercise below to build a WebWork problem with <c>pretext build -g webwork</c>.</p>
    <!-- <exercise>
      <webwork>
        <pg-code>
          $a = Compute(random(1, 9, 1));
          $b = Compute(random(1, 9, 1));
          $c = $a + $b;
        </pg-code>
        <statement>
          <p>
            Compute the sum of <m><var name="$a" /></m> and <m><var name="$b" /></m>:
          </p>
          <p>
            <m><var name="$a" /> + <var name="$b" /> =</m> <var name="$c" width="5" />
          </p>
        </statement>
        <hint>
          <p>
            Add <m><var name="$a" /></m> and <m><var name="$b" /></m> together.
          </p>
        </hint>
        <solution>
          <p>
            <m><var name="$a" /> + <var name="$b" /> = <var name="$c" /></m>.
          </p>
        </solution>
      </webwork>
    </exercise> -->
  </section>
  <section xml:id="youtube">
    <title>YouTube Example</title>
    <p>In your source, uncomment the line below to include a YouTube video.</p>
    <p>Use <c>pretext build -g youtube</c> to generate its thumbnail (useful for PDF).</p>
    <!-- <video youtube="dQw4w9WgXcQ"/> -->
  </section>
  <section xml:id="codelens">
    <title>Codelens Example</title>
    <p>In your source, uncomment the line below to include an interactive Python program.</p>
    <p>Use <c>pretext build -g codelens</c> to generate files necessary for interactivity.</p>
    <!-- <listing xml:id="sieve-python">
      <caption>Finding primes</caption>
      <program xml:id="sieve-codelens-python" interactive="codelens" language="python">
        <input><![CDATA[
def SieveOfEratosthenes(n):
    # array of type boolean with True values in it
    prime = [True for i in range(n + 1)]
    p = 2
    while (p * p <= n):
      # If it remain unchanged it is prime
      if (prime[p] == True):
          # updating all the multiples
          for i in range(p * 2, n + 1, p):
            prime[i] = False
      p += 1
    prime[0]= False
    prime[1]= False
    # Print
    for p in range(n + 1):
      if prime[p]:
          print (p,end=" ")
# main
if __name__=='__main__':
    n = 20
    print ("The prime numbers smaller than or equal to", n,"is")
    SieveOfEratosthenes(n)
      ]]></input>
      </program>
    </listing> -->
  </section>
</chapter>
